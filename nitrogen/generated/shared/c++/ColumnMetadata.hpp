///
/// ColumnMetadata.hpp
/// Thu Sep 05 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ColumnType` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { enum class ColumnType; }

#include <string>
#include "ColumnType.hpp"

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (ColumnMetadata).
   */
  struct ColumnMetadata {
  public:
    std::string columnName     SWIFT_PRIVATE;
    ColumnType columnDeclaredType     SWIFT_PRIVATE;
    double columnIndex     SWIFT_PRIVATE;

  public:
    explicit ColumnMetadata(std::string columnName, ColumnType columnDeclaredType, double columnIndex): columnName(columnName), columnDeclaredType(columnDeclaredType), columnIndex(columnIndex) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ ColumnMetadata <> JS ColumnMetadata (object)
  template <>
  struct JSIConverter<ColumnMetadata> {
    static inline ColumnMetadata fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ColumnMetadata(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "columnName")),
        JSIConverter<ColumnType>::fromJSI(runtime, obj.getProperty(runtime, "columnDeclaredType")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "columnIndex"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ColumnMetadata& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "columnName", JSIConverter<std::string>::toJSI(runtime, arg.columnName));
      obj.setProperty(runtime, "columnDeclaredType", JSIConverter<ColumnType>::toJSI(runtime, arg.columnDeclaredType));
      obj.setProperty(runtime, "columnIndex", JSIConverter<double>::toJSI(runtime, arg.columnIndex));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "columnName"))) return false;
      if (!JSIConverter<ColumnType>::canConvert(runtime, obj.getProperty(runtime, "columnDeclaredType"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "columnIndex"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
