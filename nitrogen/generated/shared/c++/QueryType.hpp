///
/// QueryType.hpp
/// Fri Sep 06 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::rnquicksqlite {

  /**
   * An enum which can be represented as a JavaScript union (QueryType).
   */
  enum class QueryType {
    SELECT      SWIFT_NAME(select) = 0,
    INSERT      SWIFT_NAME(insert) = 1,
    UPDATE      SWIFT_NAME(update) = 2,
    DELETE      SWIFT_NAME(delete) = 3,
    OTHER      SWIFT_NAME(other) = 4,
  } CLOSED_ENUM;

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ QueryType <> JS QueryType (union)
  template <>
  struct JSIConverter<QueryType> {
    static inline QueryType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("SELECT"): return QueryType::SELECT;
        case hashString("INSERT"): return QueryType::INSERT;
        case hashString("UPDATE"): return QueryType::UPDATE;
        case hashString("DELETE"): return QueryType::DELETE;
        case hashString("OTHER"): return QueryType::OTHER;
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert \"" + unionValue + "\" to enum QueryType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, QueryType arg) {
      switch (arg) {
        case QueryType::SELECT: return JSIConverter<std::string>::toJSI(runtime, "SELECT");
        case QueryType::INSERT: return JSIConverter<std::string>::toJSI(runtime, "INSERT");
        case QueryType::UPDATE: return JSIConverter<std::string>::toJSI(runtime, "UPDATE");
        case QueryType::DELETE: return JSIConverter<std::string>::toJSI(runtime, "DELETE");
        case QueryType::OTHER: return JSIConverter<std::string>::toJSI(runtime, "OTHER");
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert QueryType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("SELECT"):
        case hashString("INSERT"):
        case hashString("UPDATE"):
        case hashString("DELETE"):
        case hashString("OTHER"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
