///
/// NativeQueryResult.hpp
/// Wed Sep 11 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `QueryType` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { enum class QueryType; }
// Forward declaration of `HybridSelectQueryResultSpec` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { class HybridSelectQueryResultSpec; }

#include "QueryType.hpp"
#include <optional>
#include <memory>
#include "HybridSelectQueryResultSpec.hpp"

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (NativeQueryResult).
   */
  struct NativeQueryResult {
  public:
    QueryType queryType     SWIFT_PRIVATE;
    std::optional<double> insertId     SWIFT_PRIVATE;
    double rowsAffected     SWIFT_PRIVATE;
    std::optional<std::shared_ptr<margelo::nitro::rnquicksqlite::HybridSelectQueryResultSpec>> selectQueryResult     SWIFT_PRIVATE;

  public:
    explicit NativeQueryResult(QueryType queryType, std::optional<double> insertId, double rowsAffected, std::optional<std::shared_ptr<margelo::nitro::rnquicksqlite::HybridSelectQueryResultSpec>> selectQueryResult): queryType(queryType), insertId(insertId), rowsAffected(rowsAffected), selectQueryResult(selectQueryResult) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ NativeQueryResult <> JS NativeQueryResult (object)
  template <>
  struct JSIConverter<NativeQueryResult> {
    static inline NativeQueryResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NativeQueryResult(
        JSIConverter<QueryType>::fromJSI(runtime, obj.getProperty(runtime, "queryType")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "insertId")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "rowsAffected")),
        JSIConverter<std::optional<std::shared_ptr<margelo::nitro::rnquicksqlite::HybridSelectQueryResultSpec>>>::fromJSI(runtime, obj.getProperty(runtime, "selectQueryResult"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NativeQueryResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "queryType", JSIConverter<QueryType>::toJSI(runtime, arg.queryType));
      obj.setProperty(runtime, "insertId", JSIConverter<std::optional<double>>::toJSI(runtime, arg.insertId));
      obj.setProperty(runtime, "rowsAffected", JSIConverter<double>::toJSI(runtime, arg.rowsAffected));
      obj.setProperty(runtime, "selectQueryResult", JSIConverter<std::optional<std::shared_ptr<margelo::nitro::rnquicksqlite::HybridSelectQueryResultSpec>>>::toJSI(runtime, arg.selectQueryResult));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<QueryType>::canConvert(runtime, obj.getProperty(runtime, "queryType"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "insertId"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "rowsAffected"))) return false;
      if (!JSIConverter<std::optional<std::shared_ptr<margelo::nitro::rnquicksqlite::HybridSelectQueryResultSpec>>>::canConvert(runtime, obj.getProperty(runtime, "selectQueryResult"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
