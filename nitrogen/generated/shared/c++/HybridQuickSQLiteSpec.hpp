///
/// HybridQuickSQLiteSpec.hpp
/// Sun Sep 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Transaction` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { struct Transaction; }

#include <functional>
#include <string>
#include <future>
#include "Transaction.hpp"

namespace margelo::nitro::rnquicksqlite {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `QuickSQLite`
   * Inherit this class to create instances of `HybridQuickSQLiteSpec` in C++.
   * @example
   * ```cpp
   * class HybridQuickSQLite: public HybridQuickSQLiteSpec {
   *   // ...
   * };
   * ```
   */
  class HybridQuickSQLiteSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridQuickSQLiteSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridQuickSQLiteSpec() { }

    public:
      // Properties
      virtual std::function<void(const std::string& /* dbName */, const std::string& /* location */)> getOpen() = 0;
      virtual void setOpen(const std::function<void(const std::string& /* dbName */, const std::string& /* location */)>& open) = 0;
      virtual std::function<void(const std::string& /* dbName */)> getClose() = 0;
      virtual void setClose(const std::function<void(const std::string& /* dbName */)>& close) = 0;
      virtual std::function<void(const std::string& /* dbName */, const std::string& /* location */)> getDelete() = 0;
      virtual void setDelete(const std::function<void(const std::string& /* dbName */, const std::string& /* location */)>& delete) = 0;
      virtual std::function<void(const std::string& /* mainDbName */, const std::string& /* dbNameToAttach */, const std::string& /* alias */, const std::string& /* location */)> getAttach() = 0;
      virtual void setAttach(const std::function<void(const std::string& /* mainDbName */, const std::string& /* dbNameToAttach */, const std::string& /* alias */, const std::string& /* location */)>& attach) = 0;
      virtual std::function<void(const std::string& /* mainDbName */, const std::string& /* alias */)> getDetach() = 0;
      virtual void setDetach(const std::function<void(const std::string& /* mainDbName */, const std::string& /* alias */)>& detach) = 0;
      virtual std::function<std::future<std::future<void>>(const std::string& /* dbName */, const std::function<std::future<std::future<void>>(const Transaction& /* tx */)>& /* fn */)> getTransaction() = 0;
      virtual void setTransaction(const std::function<std::future<std::future<void>>(const std::string& /* dbName */, const std::function<std::future<std::future<void>>(const Transaction& /* tx */)>& /* fn */)>& transaction) = 0;

    public:
      // Methods
      

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "QuickSQLite";
  };

} // namespace margelo::nitro::rnquicksqlite
