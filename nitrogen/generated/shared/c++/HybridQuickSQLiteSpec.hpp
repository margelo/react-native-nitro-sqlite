///
/// HybridQuickSQLiteSpec.hpp
/// Thu Sep 05 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Transaction` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { struct Transaction; }
// Forward declaration of `QueryResult` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { struct QueryResult; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `BatchQueryResult` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { struct BatchQueryResult; }
// Forward declaration of `FileLoadResult` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { struct FileLoadResult; }

#include <string>
#include <optional>
#include <future>
#include <functional>
#include "Transaction.hpp"
#include "QueryResult.hpp"
#include <variant>
#include <NitroModules/ArrayBuffer.hpp>
#include "BatchQueryResult.hpp"
#include <vector>
#include <tuple>
#include "FileLoadResult.hpp"

namespace margelo::nitro::rnquicksqlite {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `QuickSQLite`
   * Inherit this class to create instances of `HybridQuickSQLiteSpec` in C++.
   * @example
   * ```cpp
   * class HybridQuickSQLite: public HybridQuickSQLiteSpec {
   *   // ...
   * };
   * ```
   */
  class HybridQuickSQLiteSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridQuickSQLiteSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridQuickSQLiteSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual void open(const std::string& dbName, const std::optional<std::string>& location) = 0;
      virtual void close(const std::string& dbName) = 0;
      virtual void drop(const std::string& dbName, const std::optional<std::string>& location) = 0;
      virtual void attach(const std::string& mainDbName, const std::string& dbNameToAttach, const std::string& alias, const std::optional<std::string>& location) = 0;
      virtual void detach(const std::string& mainDbName, const std::string& alias) = 0;
      virtual std::future<void> transaction(const std::string& dbName, const std::function<std::future<std::future<void>>(const Transaction& /* tx */)>& fn) = 0;
      virtual QueryResult execute(const std::string& dbName, const std::string& query, const std::optional<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>& params) = 0;
      virtual std::future<QueryResult> executeAsync(const std::string& dbName, const std::string& query, const std::optional<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>& params) = 0;
      virtual BatchQueryResult executeBatch(const std::string& dbName, const std::vector<std::variant<std::tuple<std::string>, std::tuple<std::string, std::variant<std::vector<std::nullptr_t>, std::vector<std::vector<std::nullptr_t>>>>>>& commands) = 0;
      virtual std::future<BatchQueryResult> executeBatchAsync(const std::string& dbName, const std::vector<std::variant<std::tuple<std::string>, std::tuple<std::string, std::variant<std::vector<std::nullptr_t>, std::vector<std::vector<std::nullptr_t>>>>>>& commands) = 0;
      virtual FileLoadResult loadFile(const std::string& dbName, const std::string& location) = 0;
      virtual std::future<FileLoadResult> loadFileAsync(const std::string& dbName, const std::string& location) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "QuickSQLite";
  };

} // namespace margelo::nitro::rnquicksqlite
