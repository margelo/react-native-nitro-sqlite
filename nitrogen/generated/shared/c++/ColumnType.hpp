///
/// ColumnType.hpp
/// Sun Sep 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::rnquicksqlite {

  /**
   * An enum which can be represented as a JavaScript union (ColumnType).
   */
  enum class ColumnType {
    NULL_VALUE      SWIFT_NAME(nullValue) = 0,
    TEXT      SWIFT_NAME(text) = 1,
    INTEGER      SWIFT_NAME(integer) = 2,
    INT64      SWIFT_NAME(int64) = 3,
    DOUBLE      SWIFT_NAME(double) = 4,
    BOOLEAN      SWIFT_NAME(boolean) = 5,
    ARRAY_BUFFER      SWIFT_NAME(arrayBuffer) = 6,
  } CLOSED_ENUM;

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ ColumnType <> JS ColumnType (union)
  template <>
  struct JSIConverter<ColumnType> {
    static inline ColumnType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("NULL_VALUE"): return ColumnType::NULL_VALUE;
        case hashString("TEXT"): return ColumnType::TEXT;
        case hashString("INTEGER"): return ColumnType::INTEGER;
        case hashString("INT64"): return ColumnType::INT64;
        case hashString("DOUBLE"): return ColumnType::DOUBLE;
        case hashString("BOOLEAN"): return ColumnType::BOOLEAN;
        case hashString("ARRAY_BUFFER"): return ColumnType::ARRAY_BUFFER;
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert \"" + unionValue + "\" to enum ColumnType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, ColumnType arg) {
      switch (arg) {
        case ColumnType::NULL_VALUE: return JSIConverter<std::string>::toJSI(runtime, "NULL_VALUE");
        case ColumnType::TEXT: return JSIConverter<std::string>::toJSI(runtime, "TEXT");
        case ColumnType::INTEGER: return JSIConverter<std::string>::toJSI(runtime, "INTEGER");
        case ColumnType::INT64: return JSIConverter<std::string>::toJSI(runtime, "INT64");
        case ColumnType::DOUBLE: return JSIConverter<std::string>::toJSI(runtime, "DOUBLE");
        case ColumnType::BOOLEAN: return JSIConverter<std::string>::toJSI(runtime, "BOOLEAN");
        case ColumnType::ARRAY_BUFFER: return JSIConverter<std::string>::toJSI(runtime, "ARRAY_BUFFER");
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert ColumnType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("NULL_VALUE"):
        case hashString("TEXT"):
        case hashString("INTEGER"):
        case hashString("INT64"):
        case hashString("DOUBLE"):
        case hashString("BOOLEAN"):
        case hashString("ARRAY_BUFFER"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
