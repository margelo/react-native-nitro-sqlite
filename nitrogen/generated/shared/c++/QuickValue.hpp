///
/// QuickValue.hpp
/// Sun Sep 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `QuickDataType` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { enum class QuickDataType; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include "QuickDataType.hpp"
#include <string>
#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (QuickValue).
   */
  struct QuickValue {
  public:
    QuickDataType dataType     SWIFT_PRIVATE;
    bool booleanValue     SWIFT_PRIVATE;
    double doubleOrIntValue     SWIFT_PRIVATE;
    double int64Value     SWIFT_PRIVATE;
    std::string textValue     SWIFT_PRIVATE;
    std::shared_ptr<ArrayBuffer> arrayBufferValue     SWIFT_PRIVATE;
    double arrayBufferSize     SWIFT_PRIVATE;

  public:
    explicit QuickValue(QuickDataType dataType, bool booleanValue, double doubleOrIntValue, double int64Value, std::string textValue, std::shared_ptr<ArrayBuffer> arrayBufferValue, double arrayBufferSize): dataType(dataType), booleanValue(booleanValue), doubleOrIntValue(doubleOrIntValue), int64Value(int64Value), textValue(textValue), arrayBufferValue(arrayBufferValue), arrayBufferSize(arrayBufferSize) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ QuickValue <> JS QuickValue (object)
  template <>
  struct JSIConverter<QuickValue> {
    static inline QuickValue fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return QuickValue(
        JSIConverter<QuickDataType>::fromJSI(runtime, obj.getProperty(runtime, "dataType")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "booleanValue")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "doubleOrIntValue")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "int64Value")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "textValue")),
        JSIConverter<std::shared_ptr<ArrayBuffer>>::fromJSI(runtime, obj.getProperty(runtime, "arrayBufferValue")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "arrayBufferSize"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const QuickValue& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "dataType", JSIConverter<QuickDataType>::toJSI(runtime, arg.dataType));
      obj.setProperty(runtime, "booleanValue", JSIConverter<bool>::toJSI(runtime, arg.booleanValue));
      obj.setProperty(runtime, "doubleOrIntValue", JSIConverter<double>::toJSI(runtime, arg.doubleOrIntValue));
      obj.setProperty(runtime, "int64Value", JSIConverter<double>::toJSI(runtime, arg.int64Value));
      obj.setProperty(runtime, "textValue", JSIConverter<std::string>::toJSI(runtime, arg.textValue));
      obj.setProperty(runtime, "arrayBufferValue", JSIConverter<std::shared_ptr<ArrayBuffer>>::toJSI(runtime, arg.arrayBufferValue));
      obj.setProperty(runtime, "arrayBufferSize", JSIConverter<double>::toJSI(runtime, arg.arrayBufferSize));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<QuickDataType>::canConvert(runtime, obj.getProperty(runtime, "dataType"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "booleanValue"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "doubleOrIntValue"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "int64Value"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "textValue"))) return false;
      if (!JSIConverter<std::shared_ptr<ArrayBuffer>>::canConvert(runtime, obj.getProperty(runtime, "arrayBufferValue"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "arrayBufferSize"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
