///
/// Transaction.hpp
/// Fri Sep 06 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `QueryResult` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { struct QueryResult; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <functional>
#include <future>
#include "QueryResult.hpp"
#include <string>
#include <variant>
#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (Transaction).
   */
  struct Transaction {
  public:
    std::function<std::future<QueryResult>()> commit     SWIFT_PRIVATE;
    std::function<std::future<QueryResult>()> rollback     SWIFT_PRIVATE;
    std::function<std::future<QueryResult>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)> execute     SWIFT_PRIVATE;
    std::function<std::future<std::future<QueryResult>>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)> executeAsync     SWIFT_PRIVATE;

  public:
    explicit Transaction(std::function<std::future<QueryResult>()> commit, std::function<std::future<QueryResult>()> rollback, std::function<std::future<QueryResult>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)> execute, std::function<std::future<std::future<QueryResult>>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)> executeAsync): commit(commit), rollback(rollback), execute(execute), executeAsync(executeAsync) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ Transaction <> JS Transaction (object)
  template <>
  struct JSIConverter<Transaction> {
    static inline Transaction fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Transaction(
        JSIConverter<std::function<std::future<QueryResult>()>>::fromJSI(runtime, obj.getProperty(runtime, "commit")),
        JSIConverter<std::function<std::future<QueryResult>()>>::fromJSI(runtime, obj.getProperty(runtime, "rollback")),
        JSIConverter<std::function<std::future<QueryResult>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)>>::fromJSI(runtime, obj.getProperty(runtime, "execute")),
        JSIConverter<std::function<std::future<std::future<QueryResult>>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)>>::fromJSI(runtime, obj.getProperty(runtime, "executeAsync"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Transaction& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "commit", JSIConverter<std::function<std::future<QueryResult>()>>::toJSI(runtime, arg.commit));
      obj.setProperty(runtime, "rollback", JSIConverter<std::function<std::future<QueryResult>()>>::toJSI(runtime, arg.rollback));
      obj.setProperty(runtime, "execute", JSIConverter<std::function<std::future<QueryResult>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)>>::toJSI(runtime, arg.execute));
      obj.setProperty(runtime, "executeAsync", JSIConverter<std::function<std::future<std::future<QueryResult>>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)>>::toJSI(runtime, arg.executeAsync));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::function<std::future<QueryResult>()>>::canConvert(runtime, obj.getProperty(runtime, "commit"))) return false;
      if (!JSIConverter<std::function<std::future<QueryResult>()>>::canConvert(runtime, obj.getProperty(runtime, "rollback"))) return false;
      if (!JSIConverter<std::function<std::future<QueryResult>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)>>::canConvert(runtime, obj.getProperty(runtime, "execute"))) return false;
      if (!JSIConverter<std::function<std::future<std::future<QueryResult>>(const std::string& /* query */, const std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>& /* params */)>>::canConvert(runtime, obj.getProperty(runtime, "executeAsync"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
