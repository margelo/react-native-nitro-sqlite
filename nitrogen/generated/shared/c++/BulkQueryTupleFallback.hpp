///
/// BulkQueryTupleFallback.hpp
/// Fri Sep 06 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <variant>
#include <vector>

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (BulkQueryTupleFallback).
   */
  struct BulkQueryTupleFallback {
  public:
    std::string first     SWIFT_PRIVATE;
    std::variant<std::vector<std::nullptr_t>, std::vector<std::vector<std::nullptr_t>>> second     SWIFT_PRIVATE;

  public:
    explicit BulkQueryTupleFallback(std::string first, std::variant<std::vector<std::nullptr_t>, std::vector<std::vector<std::nullptr_t>>> second): first(first), second(second) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ BulkQueryTupleFallback <> JS BulkQueryTupleFallback (object)
  template <>
  struct JSIConverter<BulkQueryTupleFallback> {
    static inline BulkQueryTupleFallback fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return BulkQueryTupleFallback(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "first")),
        JSIConverter<std::variant<std::vector<std::nullptr_t>, std::vector<std::vector<std::nullptr_t>>>>::fromJSI(runtime, obj.getProperty(runtime, "second"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const BulkQueryTupleFallback& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "first", JSIConverter<std::string>::toJSI(runtime, arg.first));
      obj.setProperty(runtime, "second", JSIConverter<std::variant<std::vector<std::nullptr_t>, std::vector<std::vector<std::nullptr_t>>>>::toJSI(runtime, arg.second));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "first"))) return false;
      if (!JSIConverter<std::variant<std::vector<std::nullptr_t>, std::vector<std::vector<std::nullptr_t>>>>::canConvert(runtime, obj.getProperty(runtime, "second"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
