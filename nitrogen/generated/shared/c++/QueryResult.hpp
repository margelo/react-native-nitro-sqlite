///
/// QueryResult.hpp
/// Sun Sep 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `QueryResultRow` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { struct QueryResultRow; }
// Forward declaration of `ColumnMetadata` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { struct ColumnMetadata; }

#include <optional>
#include <vector>
#include "QueryResultRow.hpp"
#include "ColumnMetadata.hpp"

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (QueryResult).
   */
  struct QueryResult {
  public:
    std::optional<double> insertId     SWIFT_PRIVATE;
    double rowsAffected     SWIFT_PRIVATE;
    std::optional<std::vector<QueryResultRow>> rows     SWIFT_PRIVATE;
    std::optional<std::vector<ColumnMetadata>> metadata     SWIFT_PRIVATE;

  public:
    explicit QueryResult(std::optional<double> insertId, double rowsAffected, std::optional<std::vector<QueryResultRow>> rows, std::optional<std::vector<ColumnMetadata>> metadata): insertId(insertId), rowsAffected(rowsAffected), rows(rows), metadata(metadata) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ QueryResult <> JS QueryResult (object)
  template <>
  struct JSIConverter<QueryResult> {
    static inline QueryResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return QueryResult(
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "insertId")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "rowsAffected")),
        JSIConverter<std::optional<std::vector<QueryResultRow>>>::fromJSI(runtime, obj.getProperty(runtime, "rows")),
        JSIConverter<std::optional<std::vector<ColumnMetadata>>>::fromJSI(runtime, obj.getProperty(runtime, "metadata"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const QueryResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "insertId", JSIConverter<std::optional<double>>::toJSI(runtime, arg.insertId));
      obj.setProperty(runtime, "rowsAffected", JSIConverter<double>::toJSI(runtime, arg.rowsAffected));
      obj.setProperty(runtime, "rows", JSIConverter<std::optional<std::vector<QueryResultRow>>>::toJSI(runtime, arg.rows));
      obj.setProperty(runtime, "metadata", JSIConverter<std::optional<std::vector<ColumnMetadata>>>::toJSI(runtime, arg.metadata));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "insertId"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "rowsAffected"))) return false;
      if (!JSIConverter<std::optional<std::vector<QueryResultRow>>>::canConvert(runtime, obj.getProperty(runtime, "rows"))) return false;
      if (!JSIConverter<std::optional<std::vector<ColumnMetadata>>>::canConvert(runtime, obj.getProperty(runtime, "metadata"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
