///
/// QueryResultRow.hpp
/// Sun Sep 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <vector>
#include <functional>
#include <future>

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (QueryResultRow).
   */
  struct QueryResultRow {
  public:
    std::vector<std::nullptr_t> _array     SWIFT_PRIVATE;
    double length     SWIFT_PRIVATE;
    std::function<std::future<std::nullptr_t>(double /* idx */)> item     SWIFT_PRIVATE;

  public:
    explicit QueryResultRow(std::vector<std::nullptr_t> _array, double length, std::function<std::future<std::nullptr_t>(double /* idx */)> item): _array(_array), length(length), item(item) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ QueryResultRow <> JS QueryResultRow (object)
  template <>
  struct JSIConverter<QueryResultRow> {
    static inline QueryResultRow fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return QueryResultRow(
        JSIConverter<std::vector<std::nullptr_t>>::fromJSI(runtime, obj.getProperty(runtime, "_array")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "length")),
        JSIConverter<std::function<std::future<std::nullptr_t>(double /* idx */)>>::fromJSI(runtime, obj.getProperty(runtime, "item"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const QueryResultRow& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "_array", JSIConverter<std::vector<std::nullptr_t>>::toJSI(runtime, arg._array));
      obj.setProperty(runtime, "length", JSIConverter<double>::toJSI(runtime, arg.length));
      obj.setProperty(runtime, "item", JSIConverter<std::function<std::future<std::nullptr_t>(double /* idx */)>>::toJSI(runtime, arg.item));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::vector<std::nullptr_t>>::canConvert(runtime, obj.getProperty(runtime, "_array"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "length"))) return false;
      if (!JSIConverter<std::function<std::future<std::nullptr_t>(double /* idx */)>>::canConvert(runtime, obj.getProperty(runtime, "item"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
